#version 330 core

// Interpolated values from the vertex shasers
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Output EyeDirection_cameraspaceout 
out vec3 color;

// Values that stay constant for the whole mesh
uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;

void main(){

    // Light emission properties
    // You probably want to put them as uniforms
    // LightColor and LightPower are set in the shader through GLSL uniforms.
    vec3 LightColor = vec3(1, 1, 1);
    float LightPower = 50.0f;

    // Material properties
    // MaterialDiffuseColor is simply fetched from the texture.
    vec3 MaterialDiffuseColor = texture(myTextureSampler, UV).rgb;
    vec3 MaterialAmbientColor = vec3(0.1, 0.1, 0.1) * MaterialDiffuseColor;
    vec3 MaterialSpecularColor = vec3(0.3, 0.3, 0.3);

    // Distance to the Light
    float distance = length(LightPosition_worldspace - Position_worldspace);

    // We choose the camera space because it’s easy to compute the light’s position in this space
    // Normal of the computed fragment, in camera space
    vec3 n = normalize(Normal_cameraspace);
    // Direction of the light (from the fragment to the light)
    vec3 l = normalize(LightDirection_cameraspace);
    // Cosine of the angle between the normal and the light direction,
    // clamped above 0
    //  - light is at the vertical of the triangle -> 1
    //  - light is perpendicular to the triangle -> 0
    //  - light is behind the triangle -> 0
    float cosTheta = clamp(dot(n, l), 0, 1);

    // R is the direction in which the light reflects. 
    // E is the inverse direction of the eye (just like we did for “l”); 
    // If the angle between these two is little, it means we are looking straight into the reflection.
    // Eye vector (towards the camera)
    vec3 E = normalize(EyeDirection_cameraspace);
    // Direction in which the triangle reflects the light
    vec3 R = reflect(-l, n);
    // Cosine of the angle between the Eye vector and the Reflect vector
    // clamped to 0
    //  - looking into the reflection -> 1
    //  - looking elsewhere -> < 1
    float cosAlpha = clamp(dot(E, R), 0, 1);

    // Diffuse : "color" of the object
    // When light hits an object, an important fraction of it is reflected in all directions.
    vec3 colorDiffuse = MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance * distance);

    // Ambient : simulates indirect lighting
    // We expect the back of Suzanne to be receive more light because in real life, 
    // the lamp would light the wall behind it, which would in turn (slightly less) light the back of the object.
    vec3 colorAmbient = MaterialAmbientColor;

    // Specular : reflective hightlight, like a mirror
    // The other part of light that is reflected is reflected mostly in the direction that is the reflection of the light on the surface. 
    // This is the specular component.
    // pow(cosAlpha,5) is used to control the width of the specular lobe. Increase 5 to get a thinner lobe.
    vec3 colorSpecularColor = MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha, 5) / (distance * distance);

    color = colorDiffuse + colorAmbient + colorSpecularColor;        
        
}